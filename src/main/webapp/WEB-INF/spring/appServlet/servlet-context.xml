<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 어노테이션을 사용하여 스프링 mvc가 제공하는 기능들을 사용(설정)할 수 있도록 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- /resources/** 주소로 오는 요청(GET)은 /resources/ 폴더에서 지정된 경로의 파일을 찾아서 응답으로 보내주는 핸들러(컨트롤러) -->
	<!-- 스프링 컨트롤러가 처리할 필요가 없는 정적인 파일(.CSS, .JS, .JPG...) 처리에 사용 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 컨트롤러의 메서드가 반환한 뷰이름 기반으로 뷰객체(JSP)를 찾아서 실행(출력) -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- base-package에 지정된 패키지(폴더) 아래에 있는 클래스들 중에서 @Controller, @Service, @Repository, @Component가 붙은
	클래스의 객체를 만들어서 스프링에 등록, @Service는 root로 가져가야함(트랜잭션 처리를 위해서) -->
	<context:component-scan base-package="kr.ac.hit.myapp" use-default-filters="false" >
			<!-- use-default-filters="true" 이렇게 해두면 @Controller, @Service, @Repository, @Component 붙은 클래스를 찾게 됨  -->
			<!-- @Controller 붙은 클래스를 찾아서 등록 -->
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 핸들러 인터셉터 등록 -->
	<interceptors>
		<interceptor>
			<!-- 어떤 주소로 요청이 왔을때 인터셉터를 실행할 것인지 설정하는 MAPPING -->
			<!-- 스프링 경로 설정에서 **은 /를 포함한 모든 글자를 의미 -->
			<mapping path="/**/*" />
		<!-- 인터셉터를 실행하지 않을 요청주소를 설정! -->
			<exclude-mapping path="/member/login.do"/>
			<exclude-mapping path="/member/add.do"/>
			<!-- 실행할 인터셉터 클래스 -->
			<beans:bean class="kr.ac.hit.myapp.comm.LoginInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	<!-- 파일이 포함된 멀티파트 폼 데이터를 받아서 해석해주는 멀티파트리졸버를 multipartResolver라는 이름으로 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 업로드 파일의 최대 크기 지정 가능 -->
	<!-- <beans:property name="maxUploadSize" value="-1"></beans:property> -->
	</beans:bean>
</beans:beans>
